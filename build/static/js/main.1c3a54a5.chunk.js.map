{"version":3,"sources":["pages/LoginPage.js","pages/SignUpPage.js","App.js","serviceWorker.js","index.js"],"names":["LoginPage","charset","name","content","http-equiv","rel","href","integrity","crossorigin","class","style","backgroundColor","borderColor","borderStyle","color","textAlign","type","id","placeholder","required","autofocus","for","border","React","Component","Signup","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAKqBA,G,uLAGb,OACI,8BACI,8BACI,0BAAMC,QAAQ,UACd,0BAAMC,KAAK,WAAWC,QAAQ,0CAC9B,0BAAMC,aAAW,kBAAkBD,QAAQ,YAC3C,0BAAME,IAAI,aAAaC,KAAK,wEAAwEC,UAAU,0EAA0EC,YAAY,cACpM,0BAAMH,IAAI,aAAaC,KAAK,0DAA0DC,UAAU,0EAA0EC,YAAY,cACtL,0BAAMH,IAAI,aAAaC,KAAK,eAC5B,mEAGJ,8BACI,yBAAKG,MAAQ,gBAAgBC,MAAO,CAACC,gBAAiB,UAAWC,YAAa,oBAAqBC,YAAa,UAC5G,8BACI,wBAAIJ,MAAM,6BAA6BC,MAAO,CAACI,MAAO,QAAQC,UAAW,WAAzE,YACA,yBAAKN,MAAM,cACP,2BAAOO,KAAK,QAAQC,GAAG,aAAaR,MAAM,eAAeS,YAAY,gBAAgBC,SAAS,GAAGC,UAAU,KAC3G,2BAAOJ,KAAK,WAAWC,GAAG,gBAAgBR,MAAM,eAAeS,YAAY,WAAWC,SAAS,MAEnG,yBAAKV,MAAM,mBACP,2BAAOO,KAAK,WAAWP,MAAM,mBAAmBQ,GAAG,oBACnD,2BAAOR,MAAM,mBAAmBY,IAAI,kBAAkBX,MAAO,CAACI,MAAM,UAApE,gBAEJ,4BAAQL,MAAM,4BAA4BO,KAAK,SAASN,MAAO,CAACC,gBAAiB,UAAWC,YAAa,YAAY,uBAAGH,MAAM,uBAA9H,aACA,uBAAGH,KAAK,IAAIW,GAAG,eAAf,oBACA,4BAAQR,MAAM,4BAA4BO,KAAK,SAASC,GAAG,SAASP,MAAO,CAACC,gBAAiB,UAAWW,OAAQ,sBAAuB,uBAAGhB,KAAK,WAAR,IAAoB,uBAAGG,MAAM,qBAA7B,oB,GA7B5Hc,IAAMC,YCmB9BC,E,iLAnBP,OACI,8BACA,wBAAIhB,MAAM,wBAAwBC,MAAO,CAACI,MAAO,QAAQC,UAAW,WAApE,YACI,yBAAKN,MAAM,cACX,2BAAOO,KAAK,QAAQC,GAAG,aAAaR,MAAM,eAAeS,YAAY,gBAAgBC,SAAS,GAAGC,UAAU,KAC1G,2BAAOJ,KAAK,WAAWC,GAAG,gBAAgBR,MAAM,eAAeS,YAAY,WAAWC,SAAS,MAEhG,yBAAKV,MAAM,mBACP,2BAAOO,KAAK,WAAWP,MAAM,mBAAmBQ,GAAG,oBACnD,2BAAOR,MAAM,mBAAmBY,IAAI,kBAAkBX,MAAO,CAACI,MAAM,UAApE,gBAEJ,4BAAQL,MAAM,4BAA4BO,KAAK,SAASN,MAAO,CAACC,gBAAiB,UAAWC,YAAa,YAAY,uBAAGH,MAAM,uBAA9H,YACA,uBAAGH,KAAK,IAAIW,GAAG,eAAf,oBACA,4BAAQR,MAAM,4BAA4BO,KAAK,SAASC,GAAG,SAASP,MAAO,CAACC,gBAAiB,UAAWW,OAAQ,sBAAuB,uBAAGb,MAAM,qBAAhJ,gB,GAfKc,IAAMC,WCmCZE,G,uLAxBX,OACE,kBAAC,IAAD,KACM,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAO,aAAaC,UAAY5B,IACvC,kBAAC,IAAD,CAAO2B,KAAO,UAAUC,UAAaH,U,GANjCF,IAAMC,YCAJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1c3a54a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './LoginPage.css';\r\n\r\n\r\nexport default class LoginPage extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <html>\r\n                <head>\r\n                    <meta charset=\"UTF-8\"/>\r\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n                    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"/>\r\n                    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"/>\r\n                    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\" integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\" crossorigin=\"anonymous\"/>\r\n                    <link rel=\"stylesheet\" href=\"/style.css\"/>\r\n                    <title>Bootstrap 4 Login/Register Form</title>\r\n                </head>\r\n                \r\n                <body>\r\n                    <div class = \"dickcontainer\" style={{backgroundColor: '#4d568b', borderColor: 'rgb(245, 206, 56)', borderStyle: 'solid'}}>\r\n                        <form > \r\n                            <h1 class=\"h3 mb-3 font-weight-normal\" style={{color: \"white\",textAlign: \"center\"}}> Sign in</h1>\r\n                            <div class=\"form-group\">\r\n                                <input type=\"email\" id=\"inputEmail\" class=\"form-control\" placeholder=\"Email address\" required=\"\" autofocus=\"\"/>\r\n                                <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" required=\"\"/>\r\n                            </div>\r\n                            <div class=\"form-check mb-2\">\r\n                                <input type=\"checkbox\" class=\"form-check-input\" id=\"autoSizingCheck\"/>\r\n                                <label class=\"form-check-label\" for=\"autoSizingCheck\" style={{color:\"white\"}}>Remember Me</label>\r\n                            </div>\r\n                            <button class=\"btn btn-success btn-block\" type=\"submit\" style={{backgroundColor: '#339999', borderColor: '#f5ce38'}}><i class=\"fas fa-sign-in-alt\"></i> Sign in </button>\r\n                            <a href=\"#\" id=\"forgot_pswd\">Forgot password?</a>\r\n                            <button class=\"btn btn-primary btn-block\" type=\"button\" id=\"signup\" style={{backgroundColor: '#f5ce38', border: '2px solid #339999' }}><a href=\"/signup\" > <i class=\"fas fa-user-plus\"></i>Sign up</a></button>\r\n                            </form> \r\n                            </div>\r\n                </body>\r\n            </html>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Signup extends React.Component {\r\n    render(){\r\n        return(\r\n            <form> \r\n            <h1 class=\"h3 font-weight-normal\" style={{color: \"white\",textAlign: \"center\"}}> Sign up</h1>\r\n                <div class=\"form-group\">\r\n                <input type=\"email\" id=\"inputEmail\" class=\"form-control\" placeholder=\"Email address\" required=\"\" autofocus=\"\"/>\r\n                 <input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" required=\"\"/>\r\n                </div>\r\n                <div class=\"form-check mb-2\">\r\n                    <input type=\"checkbox\" class=\"form-check-input\" id=\"autoSizingCheck\"/>\r\n                    <label class=\"form-check-label\" for=\"autoSizingCheck\" style={{color:\"white\"}}>Remember Me</label>\r\n                </div>\r\n                <button class=\"btn btn-success btn-block\" type=\"submit\" style={{backgroundColor: '#339999', borderColor: '#f5ce38'}}><i class=\"fas fa-sign-in-alt\"></i> Sign in</button>\r\n                <a href=\"#\" id=\"forgot_pswd\">Forgot password?</a>\r\n                <button class=\"btn btn-primary btn-block\" type=\"button\" id=\"signup\" style={{backgroundColor: '#f5ce38', border: '2px solid #339999' }}><i class=\"fas fa-user-plus\"></i>Sign up</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  NavLink\r\n} from 'react-router-dom';\r\nimport LoginPage from './pages/LoginPage';\r\nimport Signup from './pages/SignUpPage';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n  render(){\r\n    return(\r\n      <Router>\r\n            <Switch>\r\n              <Route path = \"/LoginPage\" component ={LoginPage}/>\r\n              <Route path = \"/Signup\" component = {Signup} />\r\n            </Switch>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path = \"/\" component={LoginPage}/>\r\n        <Route path = \"/signup\" component={Signup}/>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n*/\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}